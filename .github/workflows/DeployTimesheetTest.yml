name: Deploy SSIS Package TEST

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate files exist
        shell: pwsh
        run: |
          $dtprojPath = "${{ github.workspace }}\Timesheet\TimesheetMigrationV2.dtproj"
          if (-not (Test-Path $dtprojPath)) {
              Write-Error "Missing .dtproj file at $dtprojPath"
              exit 1
          }

      - name: Setup SSIS DevOps Tools
        uses: jonlabelle/setup-ssis-devops-tools@v1

      - name: Build SSIS Project
        shell: pwsh
        run: |
          $buildLogPath = "${{ github.workspace }}\build.log"
          SSISBuild.exe -p:"${{ github.workspace }}\Timesheet\TimesheetMigrationV2.dtproj" `
                       -o:"${{ github.workspace }}\build" `
                       -ss `
                       -l:"INFO;$buildLogPath"
          
          # Fail if build failed
          if ($LASTEXITCODE -ne 0) {
              Get-Content $buildLogPath | Write-Error
              exit 1
          }

      - name: Deploy SSIS Package
        shell: pwsh
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER_URL }}
          SQL_USER: ${{ secrets.DEV_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
        run: |
          $ispacPath = "${{ github.workspace }}\Timesheet\build\Development\TimesheetMigrationV2.ispac"
          
          # Validate ispac exists
          if (-not (Test-Path $ispacPath)) {
              Write-Error "Missing .ispac file at $ispacPath"
              exit 1
          }

          # Convert to hex
          try {
              $bytes = [System.IO.File]::ReadAllBytes($ispacPath)
              $hex = [System.BitConverter]::ToString($bytes).Replace("-","")
          } catch {
              Write-Error "Failed to read .ispac file: $_"
              exit 1
          }

          # Deployment SQL
          $sql = @"
          BEGIN TRY
              IF NOT EXISTS (SELECT 1 FROM [SSISDB].[catalog].[folders] WHERE [name] = 'TimesheetMigrationPacks')
                  EXEC [SSISDB].[catalog].[create_folder] 'TimesheetMigrationPacks'
              
              IF EXISTS (SELECT 1 FROM [SSISDB].[catalog].[projects] WHERE [name] = 'TimesheetMigrationV2')
                  EXEC [SSISDB].[catalog].[delete_project] 'TimesheetMigrationPacks', 'TimesheetMigrationV2'
              
              DECLARE @project_binary VARBINARY(MAX) = 0x$hex
              EXEC [SSISDB].[catalog].[deploy_project] 
                  @folder_name = 'TimesheetMigrationPacks',
                  @project_name = 'TimesheetMigrationV2',
                  @project_stream = @project_binary
              SELECT 'Deployment succeeded' AS Result
          END TRY
          BEGIN CATCH
              SELECT 
                  'ERROR: ' + ERROR_MESSAGE() AS Error,
                  ERROR_LINE() AS ErrorLine,
                  ERROR_NUMBER() AS ErrorNumber
              THROW
          END CATCH
          "@

          # Execute deployment
          try {
              $output = sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASSWORD" -d "SSISDB" -Q "$sql"
              $output | Write-Output
          } catch {
              Write-Error "Deployment failed: $_"
              exit 1
          }
