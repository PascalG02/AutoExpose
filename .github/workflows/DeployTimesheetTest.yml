name: Deploy SSIS Package TEST

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Debug: Verify directory contents
      - name: List directory contents
        run: dir "${{ github.workspace }}"
        shell: cmd

      # Verify the .dtproj file exists
      - name: Check dtproj file
        run: if not exist "${{ github.workspace }}\Timesheet\TimesheetMigrationV2.dtproj" exit /b 1
        shell: cmd

      # Install SSIS DevOps Tools
      - name: Setup SSIS DevOps Tools
        uses: jonlabelle/setup-ssis-devops-tools@v1

      # Build SSIS project to generate .ispac file
      - name: Build SSIS Project
        run: |
          cd "${{ github.workspace }}"
          SSISBuild.exe -p:Timesheet\TimesheetMigrationV2.dtproj -c:Development -o:build -ss -l:INFO;build.log
        shell: cmd

      # Deploy .ispac file to SSIS Catalog
      - name: Deploy SSIS Package
        env:
          SQL_SERVER: ${{ secrets.DEV_SQL_SERVER_URL }}
          SQL_USER: ${{ secrets.DEV_SQL_USER }}
          SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}
        run: |
          cd "${{ github.workspace }}"
          $ispacPath = Join-Path ${PWD} "Timesheet\build\Development\TimesheetMigrationV2.ispac"
          if (-not (Test-Path $ispacPath)) {
            throw "ISPAC file not found at $ispacPath"
          }
          Write-Host "ISPAC file found at: $ispacPath"
          $bytes = [System.IO.File]::ReadAllBytes($ispacPath)
          $hex = [System.BitConverter]::ToString($bytes).Replace("-","")
          Write-Host "Hex string length: $($hex.Length) characters"

          # Write T-SQL script to a temporary file
          $sqlFile = Join-Path ${PWD} "deploy_script.sql"
          $sql = @"
          DECLARE @project_binary VARBINARY(MAX) = 0x$hex
          BEGIN TRY
          IF EXISTS (SELECT 1 FROM [SSISDB].[catalog].[projects] WHERE [name] = 'TimesheetMigrationV2')
            EXEC [SSISDB].[catalog].[delete_project] 'TimesheetMigrationPacks', 'TimesheetMigrationV2'
          
          EXEC [SSISDB].[catalog].[deploy_project] 
            @folder_name = 'TimesheetMigrationPacks',
            @project_name = 'TimesheetMigrationV2',
            @project_stream = @project_binary
          PRINT 'Deployment successful to server: $env:SQL_SERVER, folder: TimesheetMigrationPacks, project: TimesheetMigrationV2'
          END TRY
          BEGIN CATCH
          PRINT 'ERROR: ' + ERROR_MESSAGE()
          THROW
          END CATCH
          "@ | Out-File -FilePath $sqlFile -Encoding UTF8

          # Run sqlcmd with the script file
          Write-Host "Executing sqlcmd against $env:SQL_SERVER with user $env:SQL_USER"
          sqlcmd -S "$env:SQL_SERVER" -U "$env:SQL_USER" -P "$env:SQL_PASSWORD" -d "SSISDB" -i $sqlFile -o "deploy.log"
          if ($LASTEXITCODE -ne 0) {
            throw "sqlcmd failed with exit code $LASTEXITCODE. Check deploy.log for details."
          }

          # Clean up temporary file
          Remove-Item $sqlFile -Force
        shell: powershell

      # Optional: Archive the .ispac file and logs as artifacts
      - name: Upload ISPAC Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssis-deployment-package
          path: ${{ github.workspace }}\build\Development\TimesheetMigrationV2.ispac

      - name: Upload Build Log
        uses: actions/upload-artifact@v4
        with:
          name: build-log
          path: ${{ github.workspace }}\build.log

      - name: Upload Deploy Log
        uses: actions/upload-artifact@v4
        with:
          name: deploy-log
          path: ${{ github.workspace }}\deploy.log
