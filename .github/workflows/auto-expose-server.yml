name: SQL Server CI via Localtonet

on:
  workflow_dispatch:
    inputs:
      sql_file:
        description: 'Path to SQL script'
        required: true
        default: 'scripts/query.sql'

env:
  LOCALTONET_TOKEN: ${{ secrets.LOCALTONET_TOKEN }}
  SQL_USER: ${{ secrets.SQL_USER }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  TEST_PORT: 5000

jobs:
  sql-operation:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    # --- SETUP ---
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        sudo apt-get update
        # Install SQL tools
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get install -y mssql-tools unixodbc-dev jq
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        
        # Download Localtonet
        wget -q https://localtonet.com/download/linux -O localtonet
        chmod +x localtonet

    # --- TUNNEL SETUP ---
    - name: Establish tunnels
      id: tunnel
      run: |
        # Start test HTTP server
        python3 -m http.server $TEST_PORT > http.log 2>&1 &
        
        # Start tunnels
        ./localtonet authtoken $LOCALTONET_TOKEN
        ./localtonet tcp 1433 --hostname sql-$GITHUB_RUN_ID > sql_tunnel.log 2>&1 &
        ./localtonet http $TEST_PORT --hostname test-$GITHUB_RUN_ID > http_tunnel.log 2>&1 &
        sleep 10
        
        # Get URLs
        SQL_URL=$(grep -oP 'tcp://\K[^ ]+' sql_tunnel.log)
        HTTP_URL=$(grep -oP 'https://\K[^ ]+' http_tunnel.log)
        
        echo "SQL_HOST_PORT=$SQL_URL" >> $GITHUB_OUTPUT
        echo "TEST_URL=https://$HTTP_URL" >> $GITHUB_OUTPUT
        
        echo "üîó Test URL: https://$HTTP_URL"
        echo "üõ¢Ô∏è SQL Endpoint: tcp://$SQL_URL"

    # --- CONNECTION VERIFICATION ---
    - name: Verify connectivity
      run: |
        # Wait for user testing (comment out for fully automated)
        echo "‚è≥ Verify connection at: ${{ steps.tunnel.outputs.TEST_URL }}"
        sleep 120  # Gives 2 minutes to test
        
        # Automated verification
        if curl -s ${{ steps.tunnel.outputs.TEST_URL }} | grep -q "Directory listing"; then
          echo "‚úÖ Tunnel working"
        else
          echo "‚ùå Tunnel failed"
          exit 1
        fi

    # --- SQL EXECUTION ---
    - name: Execute SQL
      run: |
        echo "Executing ${{ github.event.inputs.sql_file }}"
        sqlcmd -S "${{ steps.tunnel.outputs.SQL_HOST_PORT }}" \
               -U "$SQL_USER" \
               -P "$SQL_PASSWORD" \
               -i "${{ github.event.inputs.sql_file }}" \
               -o output.log \
               -e  # Echo input commands
        
        cat output.log
        
        # Fail if errors occurred
        if grep -q "Msg [0-9]" output.log; then
          echo "‚ùå SQL errors detected"
          exit 1
        fi

    # --- CLEANUP ---
    - name: Terminate tunnels
      if: always()
      run: |
        pkill -f localtonet
        pkill -f "http.server"
        echo "Tunnels terminated"