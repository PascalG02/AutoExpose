name: SQL Server CI via Localtonet

on:
  workflow_dispatch:
    inputs:
      sql_file:
        description: 'Path to SQL script'
        required: true
        default: 'TestQuery.sql'

env:
  LOCALTONET_TOKEN: ${{ secrets.LOCALTONET_TOKEN }}
  SQL_USER: ${{ secrets.SQL_USER }}
  SQL_PASSWORD: ${{ secrets.SQL_PASSWORD }}
  TEST_PORT: 5000

jobs:
  sql-operation:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    # --- INITIAL SETUP ---
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- PACKAGE CLEANUP ---
    - name: Remove conflicting Microsoft sources
      run: |
        sudo rm -f /etc/apt/sources.list.d/microsoft.list
        sudo rm -f /etc/apt/sources.list.d/msprod.list
        sudo rm -f /usr/share/keyrings/microsoft-prod.gpg
        sudo rm -f /usr/share/keyrings/microsoft.gpg

    # --- DEPENDENCY INSTALLATION ---
    - name: Install system tools
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          curl \
          gnupg \
          unixodbc-dev \
          jq \
          python3 \
          ca-certificates

    # --- MICROSOFT REPO SETUP ---
    - name: Configure Microsoft repository
      run: |
        # Clean any existing configs first
        sudo rm -f /etc/apt/sources.list.d/microsoft.list
        
        # Add new trusted key
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-packages.gpg
        
        # Add repository (Ubuntu 24.04)
        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-packages.gpg] https://packages.microsoft.com/ubuntu/24.04/prod noble main" | sudo tee /etc/apt/sources.list.d/microsoft-packages.list
        
        # Verify file was created
        ls -la /etc/apt/sources.list.d/
        cat /etc/apt/sources.list.d/microsoft-packages.list

    # --- SQL TOOLS INSTALLATION ---
    - name: Install SQL Server tools
      run: |
        sudo apt-get update
        sudo apt-get install -y mssql-tools
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc

    # --- LOCALTONET SETUP ---
    - name: Configure Localtonet
      run: |
        wget -q https://localtonet.com/download/linux -O localtonet
        chmod +x localtonet
        ./localtonet authtoken $LOCALTONET_TOKEN

    # --- TUNNEL ESTABLISHMENT ---
    - name: Start test HTTP server
      run: |
        python3 -m http.server $TEST_PORT > http.log 2>&1 &

    - name: Establish tunnels
      id: tunnel
      run: |
        ./localtonet tcp 1433 --hostname sql-$GITHUB_RUN_ID > sql_tunnel.log 2>&1 &
        ./localtonet http $TEST_PORT --hostname test-$GITHUB_RUN_ID > http_tunnel.log 2>&1 &
        sleep 10
        
        SQL_URL=$(grep -oP 'tcp://\K[^ ]+' sql_tunnel.log || echo "failed")
        HTTP_URL=$(grep -oP 'https://\K[^ ]+' http_tunnel.log || echo "failed")
        
        if [[ "$SQL_URL" == "failed" || "$HTTP_URL" == "failed" ]]; then
          echo "::error::Tunnel setup failed"
          cat sql_tunnel.log
          cat http_tunnel.log
          exit 1
        fi
        
        echo "SQL_HOST_PORT=$SQL_URL" >> $GITHUB_OUTPUT
        echo "TEST_URL=https://$HTTP_URL" >> $GITHUB_OUTPUT

    # --- EXECUTION ---
    - name: Execute SQL
      run: |
        sqlcmd -S "${{ steps.tunnel.outputs.SQL_HOST_PORT }}" \
               -U "$SQL_USER" \
               -P "$SQL_PASSWORD" \
               -i "${{ github.event.inputs.sql_file }}" \
               -o output.log \
               -b -r 1  # Strict error handling
        
        cat output.log
        ! grep -q "Msg [0-9]" output.log

    # --- CLEANUP ---
    - name: Terminate tunnels
      if: always()
      run: |
        pkill -f localtonet || true
        pkill -f "http.server" || true
        echo "Cleanup complete"
